/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sg.superherosightingmvc.dao;

import com.sg.superherosightingmvc.model.Ability;
import com.sg.superherosightingmvc.model.Anomaly;
import com.sg.superherosightingmvc.model.Location;
import com.sg.superherosightingmvc.model.Organization;
import com.sg.superherosightingmvc.model.Sighting;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author wgv85
 */
public class LocationDaoJdbcTemplateImpl implements LocationDao {
    
    // Instantiate JdbcTemplate Object instance from bean in spring-persistence.xml
    private JdbcTemplate jdbcTemplate;
    
    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }
    
    @Override
    @Transactional(propagation = Propagation.REQUIRED, readOnly = false)
    public void addLocation(Location location) {
        
        // The update method inserts the data from the Location Object into a row in the Location database table
        jdbcTemplate.update(PreparedStatements.SQL_INSERT_LOCATION,
        location.getLocationName(),
        location.getLocationDescription(),
        location.getLocationStreet(),
        location.getLocationCity(),
        location.getLocationState(),
        location.getLocationZip(),
        location.getLocationLatitude(),
        location.getLocationLongitude());
        
        //this queryForObject method asks the database for the Id int value we just inserted bc of the first parameter "SQL_SELECT_LAST_INSERT_ID"
        //the second parameter indicates what type of Object should be returned.
        int locationId = jdbcTemplate.queryForObject(PreparedStatements.SQL_SELECT_LAST_INSERT_ID, Integer.class);
        
        //Use the LocationId generated by the database to set the LocationId
        location.setLocationId(locationId);
        
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED, readOnly = false)
    public void deleteLocation(int locationId) {
        
//        //delete the AnomalySighting bridge table relationship using the LocationId
//        jdbcTemplate.update(PreparedStatements.SQL_DELETE_ANOMALYSIGHTING_BY_LOCATION_ID, locationId);
        // delete the Sighting that has the LocationId Foreign Key so that the constraint is lifted
        jdbcTemplate.update(PreparedStatements.SQL_DELETE_SIGHTING_BY_LOCATION_ID, locationId);
        // delete the Location
        jdbcTemplate.update(PreparedStatements.SQL_DELETE_LOCATION, locationId);
    
    }

    @Override
    public void updateLocation(Location location) {
        
        // Update the Location Object
        jdbcTemplate.update(PreparedStatements.SQL_UPDATE_LOCATION,
                location.getLocationName(),
                location.getLocationDescription(),
                location.getLocationState(),
                location.getLocationCity(),
                location.getLocationState(),
                location.getLocationZip(),
                location.getLocationLatitude(),
                location.getLocationLongitude(),
                location.getLocationId());
    
    }

    @Override
    public Location getLocationById(int locationId) {
        
        try {
            // return properties from the Location table for the specified Location
            return jdbcTemplate.queryForObject(PreparedStatements.SQL_SELECT_LOCATION_BY_ID, new LocationDaoJdbcTemplateImpl.LocationMapper(), locationId);
        } catch (EmptyResultDataAccessException ex) {
            return null;
        }
    
    }

    @Override
    public List<Location> getAllLocations() {
        
        // Return List of Locations after using LocationMapper and prepared statement to gather each Location
        // and its properties from the Database
        return jdbcTemplate.query(PreparedStatements.SQL_SELECT_ALL_LOCATIONS, new LocationDaoJdbcTemplateImpl.LocationMapper());
    
    }
    
    @Override
    public List<Location> getLocationsByAnomalyId(int anomalyId) {
        
        //Create a List<Location> associated with the supplied Anomaly.anomalyId
        List<Location> locations = jdbcTemplate.query(PreparedStatements.SQL_SELECT_LOCATIONS_BY_ANOMALY_ID, new LocationDaoJdbcTemplateImpl.LocationMapper(), anomalyId);
        
        //return the List<Location> locations
        return locations;
        
    }
    
    @Override
    public List<Location> GetLocationsBySightingId(int sightingId) {
        return jdbcTemplate.query(PreparedStatements.SQL_SELECT_LOCATIONS_BY_SIGHTING_ID, new LocationDaoJdbcTemplateImpl.LocationMapper(), sightingId);
    }
    
    // ======================================
    // ============ MAPPERS =================
    // ======================================
    //These convert rows from the different tables into equivalent Java Objects (Models).
    //JdbcTemplate allows us to use Mappers in our Java methods using the RowMapper interface.
    
    
    private static final class AnomalyMapper implements RowMapper<Anomaly> {
        
        @Override
        public Anomaly mapRow(ResultSet rs, int i) throws SQLException {
            Anomaly anomaly = new Anomaly();
            anomaly.setAnomalyName(rs.getString("AnomalyName"));
            anomaly.setAnomalyDescription(rs.getString("AnomalyDescription"));
            anomaly.setAnomalyId(rs.getInt("AnomalyId"));
            return anomaly;
        }
        
    }
    
    private static final class AbilityMapper implements RowMapper<Ability> {
        
        @Override
        public Ability mapRow(ResultSet rs, int i) throws SQLException {
            Ability ability = new Ability();
            ability.setAbilityName(rs.getString("AbilityName"));
            ability.setAbilityDescription(rs.getString("AbilityDescription"));
            ability.setAbilityId(rs.getInt("AbilityId"));
            return ability;
        }
    }
    
    private static final class OrganizationMapper implements RowMapper<Organization> {
        
        @Override
        public Organization mapRow(ResultSet rs, int i) throws SQLException {
            
            Organization org = new Organization();
            org.setOrganizationName(rs.getString("OrganizationName"));
            org.setOrganizationDescription(rs.getString("OrganizationDescription"));
            org.setOrganizationStreet(rs.getString("OrganizationStreet"));
            org.setOrganizationCity(rs.getString("OrganizationCity"));
            org.setOrganizationState(rs.getString("OrganizationState"));
            org.setOrganizationZip(rs.getString("OrganizationZip"));
            org.setOrganizationPhone(rs.getString("OrganizationPhone"));
            org.setOrganizationEmail(rs.getString("OrganizationEmail"));
            org.setOrganizationId(rs.getInt("OrganizationId"));
            return org;
        }
    }
    
    private static final class LocationMapper implements RowMapper<Location> {
        
        @Override
        public Location mapRow(ResultSet rs, int i) throws SQLException {
            Location loc = new Location();
            loc.setLocationName(rs.getString("LocationName"));
            loc.setLocationDescription(rs.getString("LocationDescription"));
            loc.setLocationStreet(rs.getString("LocationStreet"));
            loc.setLocationCity(rs.getString("LocationCity"));
            loc.setLocationState(rs.getString("LocationState"));
            loc.setLocationZip(rs.getString("LocationZip"));
            loc.setLocationLatitude(rs.getBigDecimal("LocationLatitude"));
            loc.setLocationLongitude(rs.getBigDecimal("LocationLongitude"));
            loc.setLocationId(rs.getInt("LocationId"));
            return loc;
        }
    }
    
    private static final class SightingMapper implements RowMapper<Sighting> {
        
        
        @Override
        public Sighting mapRow(ResultSet rs, int i) throws SQLException {
            Sighting sighting = new Sighting();
            sighting.setSightingDate(rs.getTimestamp("SightingDate").toLocalDateTime().toLocalDate());
            
            // Get Location Object to use as Sighting foreign key
            Location location = new Location();
            location.setLocationId(rs.getInt("LocationId"));
            location.setLocationName(rs.getString("LocationName"));
            location.setLocationDescription(rs.getString("LocationDescription"));
            location.setLocationStreet(rs.getString("LocationStreet"));
            location.setLocationCity(rs.getString("LocationCity"));
            location.setLocationState(rs.getString("LocationState"));
            location.setLocationZip(rs.getString("LocationZip"));
            location.setLocationLatitude(rs.getBigDecimal("LocationLatitude"));
            
            sighting.setLocation(location);
            sighting.setSightingId(rs.getInt("SightingId"));
            
            return sighting;
        }
    }
    
}
